# -*- coding: UTF-8 -*-
#
# generated by wxGlade not found on Sun Oct 25 22:13:19 2015
#
import time
import wx
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade
from HMDCCondor import HMDCCondor
from ProgressBarThreadGUI import ProgressBarThreadGUI
class RCELaunchLaunchWindowFrame(wx.Frame):
  def __init__(self, *args, **kwds):
    # begin wxGlade: RCELaunchLaunchWindowFrame.__init__
    wx.Frame.__init__(self, *args) # **kwds)

    self.rceapps = kwds['rceapps']
    self.application = kwds['application']
    self.version = kwds['version']
    self.cpu = kwds['cpu']
    self.memory = kwds['memory']

    self._version = self.version if self.version else \
               self.rceapps.get_default_version(self.application)

    self._cpu = self.rceapps.cpu(self.application, self._version) if \
                self.cpu is None else self.cpu

    self._memory = (self.rceapps.memory(self.application,self._version) if \
                self.memory is None else self.memory) // 1024

    _app_name = "{0} {1}".format(self.application, self._version)

    self.RCEApplicationIcon = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap(self.rceapps.icon(self.application), wx.BITMAP_TYPE_ANY))
    self.HMDCApplicationNameVersion = wx.StaticText(self, wx.ID_ANY, _(_app_name))
    self.JobMemorySizeLabel = wx.StaticText(self, wx.ID_ANY, _("Memory (GB)"))
    self.JobMemoryTextCtrl = wx.TextCtrl(self, wx.ID_ANY, str(self._memory))
    # No node in the cluster currently has > 999GiB memory to reserve
    self.JobMemoryTextCtrl.SetMaxLength(3)
    # Make sure that only integers can be typed into this field
    self.JobMemoryTextCtrl.Bind(wx.EVT_CHAR, self.__validate_mem_cpu_entry)
    self.JobCpuRequestLabel = wx.StaticText(self, wx.ID_ANY, _("Cpu"))
    self.JobCpuTextCtrl = wx.TextCtrl(self, wx.ID_ANY, str(self._cpu))
    # Make sure that only integers can be teyped into this field
    self.JobCpuTextCtrl.Bind(wx.EVT_CHAR, self.__validate_mem_cpu_entry)
    # No one should try to acquire interactive job slots > 999 CPU(s) 
    self.JobCpuTextCtrl.SetMaxLength(3)
    self.HelpBtn = wx.Button(self, wx.ID_ANY, _("Help"))
    self.RunJobBtn = wx.Button(self, wx.ID_ANY, _("Run"))
    self.RunJobBtn.Bind(wx.EVT_BUTTON, self.OnRunJobBtn)

    self.__set_properties()
    self.__do_layout()
    # end wxGlade

  def OnException(self, progress_bar_window, excpt):
    return
  
  def OnRunJobBtn(self, event):
    rce = HMDCCondor()

    self.Hide()
    progress_bar_window = ProgressBarThreadGUI(None, wx.ID_ANY, " ", icon = self.rceapps.icon(self.application))
    progress_bar_window.Show()
    progress_bar_window.start_task("Submitting job")
   
    print "Submitting a job"
 
    job = rce.submit(
      self.application,
      self._version,
      self.rceapps.command(self.application, self._version),
      self.rceapps.args(self.application, self._version),
      self._memory*1024,
      self._cpu)

    progress_bar_window.complete_task()

  def __set_properties(self):
    # begin wxGlade: RCELaunchLaunchWindowFrame.__set_properties
    self.SetTitle(_("Run RCE Powered Application Version"))
    self.HMDCApplicationNameVersion.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
    self.JobMemorySizeLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
    self.JobMemorySizeLabel.SetToolTipString(_("Enter the desired memory"))
    self.JobCpuRequestLabel.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
    # end wxGlade

  def __do_layout(self):
    # begin wxGlade: RCELaunchLaunchWindowFrame.__do_layout
    LaunchWindowSizer = wx.FlexGridSizer(3, 2, 2, 6)
    LaunchWindowSizer.Add(self.RCEApplicationIcon, 0, 0, 0)
    LaunchWindowSizer.Add(self.HMDCApplicationNameVersion, 0, wx.ALIGN_CENTER_VERTICAL, 0)
    LaunchWindowSizer.Add(self.JobMemorySizeLabel, 0, wx.ALIGN_CENTER_VERTICAL, 0)
    LaunchWindowSizer.Add(self.JobMemoryTextCtrl, 0, wx.EXPAND, 10)
    LaunchWindowSizer.Add(self.JobCpuRequestLabel, 0, wx.ALIGN_CENTER_VERTICAL, 0)
    LaunchWindowSizer.Add(self.JobCpuTextCtrl, 0, wx.EXPAND, 10)
    LaunchWindowSizer.Add(self.HelpBtn, 0, wx.EXPAND, 0)
    LaunchWindowSizer.Add(self.RunJobBtn, 0, wx.EXPAND, 0)
    self.SetSizer(LaunchWindowSizer)
    LaunchWindowSizer.Fit(self)
    LaunchWindowSizer.AddGrowableCol(2)
    LaunchWindowSizer.AddGrowableCol(3)
    self.Layout()
    # end wxGlade

  def __validate_mem_cpu_entry(self, event):
    keycode = event.GetKeyCode()
    
    if chr(keycode) in "1234567890" or keycode in [13, 314, 316, 8, 127]:
      event.Skip()
      return
    else:
      return False 
